import java.io.IOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;

import Connectors.AccessConnector;
import Connectors.ApacheDerbyConnector;
import Connectors.ConnectorInterface;
import Connectors.FirebirdConnector;
import Connectors.H2Connector;
import Connectors.HyperSQLConnector;
import Connectors.MariaDBConnector;
import Connectors.MssqlConnector;
import Connectors.MysqlConnector;
import Connectors.OracleConnector;
import Connectors.PostgresConnector;
import Connectors.SqliteConnector;

public class Program {

	static ConnectorInterface[] connectors = new ConnectorInterface[] {
			new OracleConnector("test", "system", "password"),
			new PostgresConnector("postgres", "postgres", "password"), new MysqlConnector("test", "root", ""),
			new MariaDBConnector("test", "root", "password"), new H2Connector("test"), new AccessConnector("test"),
			new SqliteConnector("test.db"), new HyperSQLConnector("tmp", "test"),
			new FirebirdConnector("employee.fdb", "SYSDBA", "password"),
			new ApacheDerbyConnector("webdb1", "user", "password", "codejava/net/base/"),
			new ApacheDerbyConnector("webdb3", "user1", "secret", "localhost", "1527"),
			new ApacheDerbyConnector("webdb4", "user2", "secret", ApacheDerbyConnector.Subprotocol.localhost), 
			new MssqlConnector("test", "sa", "password"), 
	};

	public static void main(String[] args) {
		Connection connection = null;
		Statement stmt = null;
		PreparedStatement statement = null;

		for (ConnectorInterface connector : connectors) {
			try {
				connection = connector.getConnection();

				DatabaseMetaData dm = null;
				if (connection != null) {
					dm = connection.getMetaData();
					System.out.println("Driver name: " + dm.getDriverName());
					System.out.println("Driver version: " + dm.getDriverVersion());
					System.out.println("Product name: " + dm.getDatabaseProductName());
					System.out.println("Product version: " + dm.getDatabaseProductVersion());
					System.out.println("URL: " + dm.getURL());
				} else
					System.exit(0);

				System.out.println("");

	            boolean isPostgres = dm.getDatabaseProductName().equals("PostgreSQL");
	            boolean isSqlite = dm.getDatabaseProductName().equals("SQLite");
	            boolean isOracle = dm.getDatabaseProductName().equals("Oracle");
	            boolean isAccess = dm.getDriverName().equals("Ucanaccess");
	            boolean isHypersql = dm.getDatabaseProductName().equals("HSQL Database Engine");
	            boolean isFirebird = dm.getDriverName().equals("Jaybird JCA/JDBC driver");
	            boolean isApacheDerby = dm.getDatabaseProductName().equals("Apache Derby");

	            
	        	//не все СУБД умеют в IF NOT EXISTS, специально для них приходится ловить SQLException при создании таблицы
	            String IF_NOT_EXISTS = (isAccess || isOracle || isFirebird || isApacheDerby ? "" : "IF NOT EXISTS ");
	            //автоинкремент везде пишется по-разному;)
	            String AUTO_INCREMENT_NOT_NULL_PRIMARY_KEY = 
            		(isAccess ? "AUTOINCREMENT NOT NULL PRIMARY KEY" : 
					(isPostgres ? "SERIAL NOT NULL PRIMARY KEY" : 
					(isOracle || isApacheDerby ? "INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY" : 
					(isSqlite ? "INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT" : //You can use the AUTOINCREMENT keyword only after(!) INTEGER PRIMARY KEY
					(isHypersql ? "INTEGER IDENTITY NOT NULL PRIMARY KEY" :
					(isFirebird ? "INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY" :
					"INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY"))))));
	            
	            
				System.out.println("Creating table...");
				stmt = connection.createStatement();
//	            stmt.executeUpdate("DROP TABLE customers");
				String sql =  "CREATE TABLE " + IF_NOT_EXISTS + "customers "
							+ "\n(" + "\n\t"
							+ "id " + AUTO_INCREMENT_NOT_NULL_PRIMARY_KEY + ", \n\t"
							+ "first_name VARCHAR(20), " + "\n\t"
							+ "last_name VARCHAR(20), " + "\n\t"
							+ "email VARCHAR(50), " + "\n\t"
							+ "age INTEGER"
							+ "\n)";
				System.out.println(sql);

				try
				{
					stmt.executeUpdate(sql);
					System.out.println("Table created!");
				}
				catch (SQLException e)
				{
					System.err.println("Table already exists");
					e.printStackTrace();
				}

				System.out.println("");
				
				
				// Создаем новую запись о регистрации
				String firstName = getRandomString(7);
				String lastName = getRandomString(10);
				String email = firstName + lastName + "@mail.com";
				Integer age = random.nextInt(100);

				// Добавляем сведения
				sql = "INSERT INTO " + "customers(first_name, last_name, email, age) " + "VALUES(?, ?, ?, ?)";
				System.out.println(sql);
				statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

				statement.setString(1, firstName);
				statement.setString(2, lastName);
				statement.setString(3, email);
				statement.setInt(4, age);

				boolean success = 1 == statement.executeUpdate();
				if (success)
					System.out.println("1 row inserted");
				else
					System.err.println("error on INSERT");

				System.out.println("");

				// Вывод содержимого таблицы
				ResultSet res = stmt.executeQuery("SELECT * FROM customers");
				printResultSet(res);

				stmt.close();
				statement.close();
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (stmt != null)
						stmt.close();
				} catch (SQLException e) {
				}
				try {
					if (statement != null)
						statement.close();
				} catch (SQLException e) {
				}
				try {
					if (connection != null)
						connection.close();
				} catch (SQLException e) {
				}
			}
			
			//pause
			try {
				System.in.read();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	static void printResultSet(ResultSet res) throws SQLException {
		ResultSetMetaData rsmd = res.getMetaData();
		for (int i = 1; i <= rsmd.getColumnCount(); i++) {
			String name = rsmd.getColumnName(i);
			System.out.print(name);
			System.out.print(' ');
		}
		System.out.println("");

		int n = 0;
		while (res.next()) {
			System.out.printf("%d) ", ++n);
			for (int i = 2; i <= rsmd.getColumnCount(); i++) {
				System.out.print(res.getObject(i));
				System.out.print(' ');
			}
			System.out.println();
		}
	}

	static Random random = new Random();
	static final String letters = "abcdefghijklmnopqrstuvwxyz";

	public static String getRandomString(int length) {
		return generateString(random, letters, length);
	}

	public static String generateString(Random rng, String characters, int length) {
		char[] text = new char[length];
		for (int i = 0; i < length; i++) {
			text[i] = characters.charAt(rng.nextInt(characters.length()));
		}
		return new String(text);
	}
}